# Docker Compose configuration for OPERA Cloud MCP Server
version: '3.8'

services:
  opera-cloud-mcp:
    build: .
    container_name: opera-cloud-mcp-server
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      # OPERA Cloud Configuration
      - OPERA_CLIENT_ID=${OPERA_CLIENT_ID}
      - OPERA_CLIENT_SECRET=${OPERA_CLIENT_SECRET}
      - OPERA_TOKEN_URL=${OPERA_TOKEN_URL:-https://api.oracle-hospitality.com/oauth/v1/tokens}
      - OPERA_BASE_URL=${OPERA_BASE_URL:-https://api.oracle-hospitality.com}
      - OPERA_API_VERSION=${OPERA_API_VERSION:-v1}
      - OPERA_ENVIRONMENT=${OPERA_ENVIRONMENT:-production}
      - OPERA_DEFAULT_HOTEL_ID=${OPERA_DEFAULT_HOTEL_ID}

      # Performance Configuration
      - OPERA_REQUEST_TIMEOUT=${OPERA_REQUEST_TIMEOUT:-30}
      - OPERA_MAX_RETRIES=${OPERA_MAX_RETRIES:-3}
      - OPERA_RETRY_BACKOFF=${OPERA_RETRY_BACKOFF:-1.0}

      # Caching Configuration
      - OPERA_ENABLE_CACHE=${OPERA_ENABLE_CACHE:-true}
      - OPERA_CACHE_TTL=${OPERA_CACHE_TTL:-300}
      - OPERA_CACHE_MAX_MEMORY=${OPERA_CACHE_MAX_MEMORY:-10000}

      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE_PATH=/app/logs/opera-cloud-mcp.log

      # Server Configuration
      - PORT=8000
      - WORKERS=${WORKERS:-1}
    volumes:
      # Persistent logs
      - ./logs:/app/logs
      # Persistent cache data
      - ./data:/app/data
    networks:
      - opera-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      # Monitoring labels for Prometheus
      - "prometheus.enable=true"
      - "prometheus.port=8000"
      - "prometheus.path=/metrics"
      # Traefik labels (if using Traefik as reverse proxy)
      - "traefik.enable=true"
      - "traefik.http.routers.opera-mcp.rule=Host(`opera-mcp.${DOMAIN:-localhost}`)"
      - "traefik.http.services.opera-mcp.loadbalancer.server.port=8000"

  # Redis for enhanced caching (optional)
  redis:
    image: redis:7-alpine
    container_name: opera-cloud-mcp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - opera-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    profiles:
      - redis  # Only start with: docker-compose --profile redis up

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: opera-cloud-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - opera-network
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: opera-cloud-mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - opera-network
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

networks:
  opera-network:
    driver: bridge
    name: opera-cloud-mcp-network

volumes:
  redis-data:
    name: opera-cloud-mcp-redis-data
  prometheus-data:
    name: opera-cloud-mcp-prometheus-data
  grafana-data:
    name: opera-cloud-mcp-grafana-data
